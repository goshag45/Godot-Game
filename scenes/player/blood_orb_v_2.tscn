[gd_scene load_steps=8 format=3 uid="uid://bgre8edfwhmng"]

[ext_resource type="Script" uid="uid://c7puqvmf71km3" path="res://scripts/blood_orb_v_2.gd" id="1_onv47"]
[ext_resource type="Shader" uid="uid://bfk6ipstl3ogh" path="res://scenes/player/glass_ball.gdshader" id="2_onv47"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_2d832"]
render_priority = 0
shader = ExtResource("2_onv47")
shader_parameter/albedo = Color(1, 1, 1, 0)
shader_parameter/roughness = 0.15
shader_parameter/normal_strength = 1.0
shader_parameter/edge_color = Color(0, 0, 0, 1)

[sub_resource type="SphereMesh" id="SphereMesh_knavn"]
material = SubResource("ShaderMaterial_2d832")

[sub_resource type="Shader" id="Shader_onv47"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_refraction : filter_linear_mipmap, repeat_enable;
uniform float refraction : hint_range(-1.0, 1.0, 0.001);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;
uniform sampler2D depth_texture : hint_depth_texture, repeat_disable, filter_nearest;

uniform float subsurface_scattering_strength : hint_range(0.0, 1.0, 0.01);
uniform sampler2D texture_subsurface_scattering : hint_default_white, filter_linear_mipmap, repeat_enable;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


// Uniforms
uniform float fill_amount : hint_range(0.0, 1.0) = 0.5; // 0=empty, 1=full
uniform float orb_radius = 1.0;
uniform vec4 blood_color : source_color = vec4(0.8, 0.1, 0.1, 1.0);
uniform bool use_gravity = false;

// Varyings
varying vec3 vertex_world_pos; // Position in view/camera space
varying vec3 vertex_model_pos;


void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
	// Calculate world position correctly
    vertex_world_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
    // Pass through original vertex position
    vertex_model_pos = VERTEX;
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Refraction: Enabled
	vec3 ref_normal = NORMAL;
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(texture(texture_refraction, base_uv), refraction_texture_channel) * refraction;

	float ref_amount = 1.0 - albedo.a * albedo_tex.a;

	float refraction_depth_tex = textureLod(depth_texture, ref_ofs, 0.0).r;
	vec4 refraction_view_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, refraction_depth_tex, 1.0);
	refraction_view_pos.xyz /= refraction_view_pos.w;

	// If the depth buffer is lower then the model's Z position, use the refracted UV, otherwise use the normal screen UV.
	// At low depth differences, decrease refraction intensity to avoid sudden discontinuities.
	EMISSION += textureLod(screen_texture, mix(SCREEN_UV, ref_ofs, smoothstep(0.0, 1.0, VERTEX.z - refraction_view_pos.z)), ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	// Force transparency on the material (required for refraction).
	ALPHA = 1.0;

	float fill_height = mix(-orb_radius, orb_radius, fill_amount);
    
    if (use_gravity) {
        // World-space gravity with camera-relative calculation
        vec3 world_up = vec3(0.0, 1.0, 0.0);
        vec3 camera_pos = (INV_VIEW_MATRIX * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
        if (dot(vertex_world_pos - camera_pos, world_up) > fill_height) {
            discard;
        }
    } else {
        // Simple model-space approach
        if (vertex_model_pos.y > fill_height) {
            discard;
        }
    }
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_knavn"]
render_priority = 0
shader = SubResource("Shader_onv47")
shader_parameter/albedo = Color(0.834693, 0, 0.0653736, 1)
shader_parameter/albedo_texture_size = Vector2i(0, 0)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.4
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 1.0
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/subsurface_scattering_strength = 0.3
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/fill_amount = 0.443
shader_parameter/orb_radius = 1.0
shader_parameter/blood_color = Color(0.8, 0.1, 0.1, 1)
shader_parameter/use_gravity = true

[sub_resource type="SphereMesh" id="SphereMesh_2d832"]
material = SubResource("ShaderMaterial_knavn")
radius = 0.48
height = 0.96

[node name="blood_orb_v2" type="Node3D"]
script = ExtResource("1_onv47")

[node name="glass_orb" type="MeshInstance3D" parent="."]
layers = 2
mesh = SubResource("SphereMesh_knavn")

[node name="blood" type="MeshInstance3D" parent="."]
layers = 2
mesh = SubResource("SphereMesh_2d832")
