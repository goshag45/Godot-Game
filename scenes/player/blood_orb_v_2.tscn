[gd_scene load_steps=10 format=3 uid="uid://bgre8edfwhmng"]

[ext_resource type="Script" uid="uid://c7puqvmf71km3" path="res://scenes/player/blood_orb_v_2.gd" id="1_onv47"]
[ext_resource type="Shader" uid="uid://bfk6ipstl3ogh" path="res://scenes/player/glass_ball.gdshader" id="2_onv47"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_onv47"]
render_priority = 0
shader = ExtResource("2_onv47")
shader_parameter/albedo = Color(1, 1, 1, 0)
shader_parameter/roughness = 0.15
shader_parameter/normal_strength = 1.0
shader_parameter/edge_color = Color(0, 0, 0, 1)

[sub_resource type="SphereMesh" id="SphereMesh_knavn"]
material = SubResource("ShaderMaterial_onv47")

[sub_resource type="Shader" id="Shader_onv47"]
code = "shader_type spatial;
render_mode blend_mix, cull_back, shadows_disabled, specular_schlick_ggx;

uniform float fill_amount : hint_range(0.0, 1.0) = 0.5; // 0 = empty, 1 = full
uniform float wave_intensity : hint_range(0.0, 0.1) = 0.03;
uniform float wave_speed : hint_range(0.1, 5.0) = 1.5;

uniform vec4 liquid_color : source_color = vec4(0.6, 0.0, 0.0, 0.8);
uniform vec4 glow_color : source_color = vec4(1.0, 0.1, 0.1, 0.5);

uniform sampler2D waves_noise; // optional: small noise texture for ripples

varying vec3 world_pos;  // pass world-space position to fragment

void vertex() {
    // Compute world-space position for fragment shader
    world_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;

    // Ripple animation in vertex Y
    float wave = 0.0;
    if (textureSize(waves_noise, 0).x > 0) {
        wave = texture(waves_noise, 2.0 * VERTEX.xz + 0.5 * TIME * vec2(1.0, 1.0)).r - 0.5;
        wave += texture(waves_noise, 2.0 * VERTEX.xz - 0.5 * TIME * vec2(1.0, 1.0)).g - 0.5;
        wave *= wave_intensity;
    } else {
        wave = sin(VERTEX.x * 3.0 + TIME * wave_speed) * wave_intensity;
        wave += cos(VERTEX.z * 2.0 - TIME * wave_speed * 0.7) * wave_intensity;
    }

    VERTEX.y += wave;
}

void fragment() {
    // Liquid surface in world space
    float liquid_surface = fill_amount;

    // Discard fragments above surface
    if (world_pos.y > liquid_surface) discard;

    // Base color
    ALBEDO = liquid_color.rgb;
    ALPHA = liquid_color.a;

    SPECULAR = 0.3;
    ROUGHNESS = 0.2;

    // Fresnel-style glow
    float view_fresnel = pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), 3.0);
    EMISSION = glow_color.rgb * view_fresnel * 0.3;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_onv47"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_2d832"]
noise = SubResource("FastNoiseLite_onv47")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_knavn"]
render_priority = 0
shader = SubResource("Shader_onv47")
shader_parameter/fill_amount = 0.0
shader_parameter/wave_intensity = 0.03
shader_parameter/wave_speed = 3.031
shader_parameter/liquid_color = Color(0.6, 0, 0, 0.945)
shader_parameter/glow_color = Color(1, 0.1, 0.1, 0.5)
shader_parameter/waves_noise = SubResource("NoiseTexture2D_2d832")

[sub_resource type="SphereMesh" id="SphereMesh_2d832"]
material = SubResource("ShaderMaterial_knavn")
radius = 0.48
height = 0.96

[node name="blood_orb_v2" type="Node3D"]
script = ExtResource("1_onv47")

[node name="glass_orb" type="MeshInstance3D" parent="."]
layers = 2
mesh = SubResource("SphereMesh_knavn")

[node name="blood" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.0293748, 0)
layers = 2
mesh = SubResource("SphereMesh_2d832")
